#BlueJ class context
comment0.target=Expression
comment0.text=\r\n\ La\ grammaire\r\n\ \r\n\ Expression\ \:\:\=\ Const\ |\ ExpressionB\r\n\ <br/>\r\n\ Const\ \:\:\=\ Integer\ Java\ (final)\r\n\ <br/>\r\n\ ExpressionB\ \:\:\=\ (Expression\ op\ Expression)\r\n\ <br/>\r\n\ op\ symbole\ final\ prenant\ une\ des\ valeurs\ suivantes\:\ +\ |\ -\ |\ ...\r\n\ <br/>\r\n\ OU\r\n\ <br/>\r\n\ ExpressionB\ \:\=\=\ Addition\ |\ Soustraction\ |\ ...\r\n\ <br/>\r\n\ Addition\ \:\=\=\ (Expression\ +\ Expression)\r\n\ <br/>\r\n\ Soustraction\ \:\:\=\ (Expression\ +\ Expression)\r\n\ <br/>\r\n\ <hr/>\r\n\ Quand\ on\ utilise\ le\ pattern\ composite\ pour\ cr\u00E9er\ une\ Expression.\ En\ fait\ \r\n\ On\ cr\u00E9er\ l'AST\ l'arbre\ s\u00E9mantquee\ Abstrait\ \r\n\ (Abstaract\ Semantic\ Tree\ en\ anglais)\r\n\ ...\r\n\ @author\ Pascal\ Fares\r\n
comment1.params=i
comment1.target=Expression\ create(java.lang.Integer)
comment2.params=op\ e1\ e2
comment2.target=Expression\ create(java.lang.String,\ Expression,\ Expression)
comment3.params=
comment3.target=java.lang.Integer\ evalNum()
comment3.text=\r\n\ Avaluation\ num\u00E9rique\r\n\ @return\ \r\n
comment4.params=
comment4.target=Expression\ eval()
comment4.text=\r\n\ Avaluation\ de\ symplification\ Expression\ donne\ Une\ autre\ expression\r\n\ @return\ \r\n
comment5.params=
comment5.target=java.lang.String\ show()
comment5.text=\r\n\ Evaluation\ affichage\ de\ l'arbre\ s\u00E9mantique\ (ou\ traduction)\r\n\ @return\ \r\n
numComments=6
